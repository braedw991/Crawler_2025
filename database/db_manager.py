# database/db_manager.py
import json
import os
import sqlite3
from typing import List, Dict

# Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n sang file database SQLite
DB_PATH = "data/database.db"

def create_connection():
    """T·∫°o k·∫øt n·ªëi ƒë·∫øn file database SQLite"""
    conn = None
    try:
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c 'data' t·ªìn t·∫°i
        os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
        conn = sqlite3.connect(DB_PATH)
        # Gi√∫p tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng dictionary thay v√¨ tuple
        conn.row_factory = sqlite3.Row 
    except sqlite3.Error as e:
        print(f"‚ùå L·ªói khi k·∫øt n·ªëi t·ªõi database: {e}")
    return conn

def create_table():
    """T·∫°o b·∫£ng 'articles' n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i"""
    conn = create_connection()
    if conn is not None:
        try:
            sql_create_articles_table = """ CREATE TABLE IF NOT EXISTS articles (
                                                url TEXT PRIMARY KEY,
                                                title TEXT NOT NULL,
                                                summary TEXT,
                                                created_at TEXT NOT NULL,
                                                image_url TEXT
                                            ); """
            cur = conn.cursor()
            cur.execute(sql_create_articles_table)
            conn.commit()
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi t·∫°o b·∫£ng: {e}")
        finally:
            conn.close()

def add_article(article: Dict) -> bool:
    """Th√™m m·ªôt b√†i vi·∫øt m·ªõi v√†o database. Tr·∫£ v·ªÅ True n·∫øu th√™m th√†nh c√¥ng."""
    conn = create_connection()
    if conn is not None:
        # D√πng INSERT OR IGNORE, n·∫øu URL ƒë√£ t·ªìn t·∫°i, n√≥ s·∫Ω b·ªè qua v√† kh√¥ng b√°o l·ªói
        sql = ''' INSERT OR IGNORE INTO articles(url,title,summary,created_at,image_url)
                  VALUES(?,?,?,?,?) '''
        try:
            cur = conn.cursor()
            cur.execute(sql, (
                article['url'],
                article['title'],
                article['summary'],
                article['created_at'],
                article.get('image_url', '') # D√πng .get ƒë·ªÉ an to√†n n·∫øu kh√¥ng c√≥ key
            ))
            conn.commit()
            # cur.rowcount s·∫Ω tr·∫£ v·ªÅ 1 n·∫øu insert th√†nh c√¥ng, 0 n·∫øu b·ªè qua
            return cur.rowcount > 0
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi th√™m b√†i vi·∫øt: {e}")
            return False
        finally:
            conn.close()
    return False

def get_all_articles(limit: int = None) -> List[Dict]:
    """L·∫•y t·∫•t c·∫£ b√†i vi·∫øt t·ª´ database, c√≥ th·ªÉ gi·ªõi h·∫°n s·ªë l∆∞·ª£ng."""
    conn = create_connection()
    articles = []
    if conn is not None:
        try:
            sql = "SELECT * FROM articles ORDER BY created_at DESC"
            if limit:
                sql += f" LIMIT {limit}"
            
            cur = conn.cursor()
            cur.execute(sql)
            rows = cur.fetchall()
            # Chuy·ªÉn ƒë·ªïi c√°c ƒë·ªëi t∆∞·ª£ng Row th√†nh dictionary
            articles = [dict(row) for row in rows]
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y b√†i vi·∫øt: {e}")
        finally:
            conn.close()
    return articles

def delete_old_articles(days_to_keep: int):
    """X√≥a c√°c b√†i vi·∫øt c≈© h∆°n s·ªë ng√†y ch·ªâ ƒë·ªãnh."""
    conn = create_connection()
    if conn is not None:
        try:
            # SQLite c√≥ th·ªÉ so s√°nh tr·ª±c ti·∫øp chu·ªói ISO 8601
            # date('now', '-X days') s·∫Ω t·∫°o ra ng√†y gi·ªõi h·∫°n
            sql = "DELETE FROM articles WHERE created_at < date('now', ?)"
            param = f'-{days_to_keep} days'
            
            cur = conn.cursor()
            cur.execute(sql, (param,))
            conn.commit()
            
            deleted_rows = cur.rowcount
            if deleted_rows > 0:
                print(f"üßπ ƒê√£ d·ªçn d·∫πp v√† x√≥a {deleted_rows} b√†i vi·∫øt c≈©.")
            else:
                print("üßπ Kh√¥ng c√≥ b√†i vi·∫øt c≈© n√†o c·∫ßn d·ªçn d·∫πp.")
                
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi d·ªçn d·∫πp database: {e}")
        finally:
            conn.close()

# --- KH·ªûI T·∫†O DATABASE KHI MODULE ƒê∆Ø·ª¢C IMPORT ---
# ƒê·∫£m b·∫£o b·∫£ng lu√¥n t·ªìn t·∫°i khi ch∆∞∆°ng tr√¨nh ch·∫°y
create_table()
